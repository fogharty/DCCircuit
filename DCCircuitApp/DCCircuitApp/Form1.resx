<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="_switch.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>